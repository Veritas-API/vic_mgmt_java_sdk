/*
 * Veritas Information Classifier (VIC)
 * APIs
 *
 * OpenAPI spec version: Resource Specific
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.JsonPatchDocument;
import io.swagger.client.model.MetadataDefinitionCollection;
import io.swagger.client.model.Policy;
import io.swagger.client.model.PolicyCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoliciesApi
 */
@Ignore
public class PoliciesApiTest {

    private final PoliciesApi api = new PoliciesApi();

    
    /**
     * Create policy
     *
     * Create a custom policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPolicyTest() throws ApiException {
        Policy body = null;
        String tenantId = null;
        Policy response = api.createPolicy(body, tenantId);

        // TODO: test validations
    }
    
    /**
     * Delete policy
     *
     * Delete a custom policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePolicyTest() throws ApiException {
        String id = null;
        String tenantId = null;
        api.deletePolicy(id, tenantId);

        // TODO: test validations
    }
    
    /**
     * List metadata definitions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMetadataDefinitionsTest() throws ApiException {
        String tenantId = null;
        MetadataDefinitionCollection response = api.getMetadataDefinitions(tenantId);

        // TODO: test validations
    }
    
    /**
     * Get policy
     *
     * Retrieve a policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPolicyTest() throws ApiException {
        String id = null;
        String tenantId = null;
        Policy response = api.getPolicy(id, tenantId);

        // TODO: test validations
    }
    
    /**
     * List policies
     *
     * Retrieve the policies for a tenant.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPolicyCollectionTest() throws ApiException {
        String tenantId = null;
        Boolean includeDisabled = null;
        Boolean includeEngineBody = null;
        String ifNoneMatch = null;
        PolicyCollection response = api.getPolicyCollection(tenantId, includeDisabled, includeEngineBody, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Patch policy
     *
     * Update part of a policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPolicyTest() throws ApiException {
        String id = null;
        List<JsonPatchDocument> patch = null;
        String tenantId = null;
        Policy response = api.patchPolicy(id, patch, tenantId);

        // TODO: test validations
    }
    
    /**
     * Reset policy to defaults
     *
     * Reset a policy to its default settings.  Only valid for built-in policies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPolicyTest() throws ApiException {
        String id = null;
        String tenantId = null;
        api.resetPolicy(id, tenantId);

        // TODO: test validations
    }
    
    /**
     * Update policy
     *
     * Update a policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePolicyTest() throws ApiException {
        String id = null;
        Policy body = null;
        String tenantId = null;
        Policy response = api.updatePolicy(id, body, tenantId);

        // TODO: test validations
    }
    
}
