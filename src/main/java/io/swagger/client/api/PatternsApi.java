/*
 * Veritas Information Classifier (VIC)
 * APIs
 *
 * OpenAPI spec version: Resource Specific
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.Pattern;
import io.swagger.client.model.PatternCollection;
import io.swagger.client.model.PolicyCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PatternsApi {
    private ApiClient apiClient;

    public PatternsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PatternsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createPattern */
    private com.squareup.okhttp.Call createPatternCall(Pattern body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/management/patterns".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPatternValidateBeforeCall(Pattern body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPattern(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createPatternCall(body, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create pattern
     * 
     * @param body New pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Pattern
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Pattern createPattern(Pattern body, String tenantId) throws ApiException {
        ApiResponse<Pattern> resp = createPatternWithHttpInfo(body, tenantId);
        return resp.getData();
    }

    /**
     * Create pattern
     * 
     * @param body New pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Pattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Pattern> createPatternWithHttpInfo(Pattern body, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = createPatternValidateBeforeCall(body, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create pattern (asynchronously)
     * 
     * @param body New pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPatternAsync(Pattern body, String tenantId, final ApiCallback<Pattern> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPatternValidateBeforeCall(body, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deletePattern */
    private com.squareup.okhttp.Call deletePatternCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/patterns/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePatternValidateBeforeCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePattern(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deletePatternCall(id, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete pattern
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePattern(String id, String tenantId) throws ApiException {
        deletePatternWithHttpInfo(id, tenantId);
    }

    /**
     * Delete pattern
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePatternWithHttpInfo(String id, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = deletePatternValidateBeforeCall(id, tenantId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete pattern (asynchronously)
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePatternAsync(String id, String tenantId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePatternValidateBeforeCall(id, tenantId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getPattern */
    private com.squareup.okhttp.Call getPatternCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/patterns/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPatternValidateBeforeCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPattern(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPatternCall(id, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get pattern
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Pattern
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Pattern getPattern(String id, String tenantId) throws ApiException {
        ApiResponse<Pattern> resp = getPatternWithHttpInfo(id, tenantId);
        return resp.getData();
    }

    /**
     * Get pattern
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Pattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Pattern> getPatternWithHttpInfo(String id, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getPatternValidateBeforeCall(id, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pattern (asynchronously)
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPatternAsync(String id, String tenantId, final ApiCallback<Pattern> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPatternValidateBeforeCall(id, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPatternCollection */
    private com.squareup.okhttp.Call getPatternCollectionCall(String tenantId, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/patterns".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPatternCollectionValidateBeforeCall(String tenantId, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getPatternCollectionCall(tenantId, ifNoneMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List patterns
     * 
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param ifNoneMatch  (optional)
     * @return PatternCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PatternCollection getPatternCollection(String tenantId, String ifNoneMatch) throws ApiException {
        ApiResponse<PatternCollection> resp = getPatternCollectionWithHttpInfo(tenantId, ifNoneMatch);
        return resp.getData();
    }

    /**
     * List patterns
     * 
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param ifNoneMatch  (optional)
     * @return ApiResponse&lt;PatternCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PatternCollection> getPatternCollectionWithHttpInfo(String tenantId, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getPatternCollectionValidateBeforeCall(tenantId, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<PatternCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List patterns (asynchronously)
     * 
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param ifNoneMatch  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPatternCollectionAsync(String tenantId, String ifNoneMatch, final ApiCallback<PatternCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPatternCollectionValidateBeforeCall(tenantId, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PatternCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPoliciesByPattern */
    private com.squareup.okhttp.Call getPoliciesByPatternCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/patterns/{id}/policies".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPoliciesByPatternValidateBeforeCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPoliciesByPattern(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPoliciesByPatternCall(id, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List policies that use a pattern
     * 
     * @param id  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return PolicyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolicyCollection getPoliciesByPattern(String id, String tenantId) throws ApiException {
        ApiResponse<PolicyCollection> resp = getPoliciesByPatternWithHttpInfo(id, tenantId);
        return resp.getData();
    }

    /**
     * List policies that use a pattern
     * 
     * @param id  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;PolicyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolicyCollection> getPoliciesByPatternWithHttpInfo(String id, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getPoliciesByPatternValidateBeforeCall(id, tenantId, null, null);
        Type localVarReturnType = new TypeToken<PolicyCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List policies that use a pattern (asynchronously)
     * 
     * @param id  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPoliciesByPatternAsync(String id, String tenantId, final ApiCallback<PolicyCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPoliciesByPatternValidateBeforeCall(id, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolicyCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updatePattern */
    private com.squareup.okhttp.Call updatePatternCall(String id, Pattern body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/management/patterns/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePatternValidateBeforeCall(String id, Pattern body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePattern(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePattern(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updatePatternCall(id, body, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update pattern
     * 
     * @param id The pattern identifier (required)
     * @param body Updated pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Pattern
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Pattern updatePattern(String id, Pattern body, String tenantId) throws ApiException {
        ApiResponse<Pattern> resp = updatePatternWithHttpInfo(id, body, tenantId);
        return resp.getData();
    }

    /**
     * Update pattern
     * 
     * @param id The pattern identifier (required)
     * @param body Updated pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Pattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Pattern> updatePatternWithHttpInfo(String id, Pattern body, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = updatePatternValidateBeforeCall(id, body, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update pattern (asynchronously)
     * 
     * @param id The pattern identifier (required)
     * @param body Updated pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePatternAsync(String id, Pattern body, String tenantId, final ApiCallback<Pattern> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePatternValidateBeforeCall(id, body, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
